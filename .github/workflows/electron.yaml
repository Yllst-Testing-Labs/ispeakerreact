name: Build portable Electron versions

on:
    push:
        branches:
            - main
    pull_request:
        branches:
            - main

permissions:
    contents: write
    pages: write
    id-token: write

jobs:
    check-tag:
      runs-on: ubuntu-latest
      steps:
        - name: Get latest tag
          id: get_tag
          run: |
              latest_tag=$(git describe --tags --abbrev=0 || echo "")
              echo "LATEST_TAG=$latest_tag" >> $GITHUB_ENV

        - name: Check if package version matches latest tag
          run: |
              if [ "${{ env.LATEST_TAG }}" == "v${{ env.PACKAGE_VERSION }}" ]; then
                echo "Error: Package version matches the latest tag. Please update the package version."
                exit 1
              fi

    build:
        strategy:
            matrix:
                os: [ubuntu-latest, macos-latest, windows-latest]
                include:
                    - os: macos-latest
                      arch: [x64, arm64]
                    - os: windows-latest
                      arch: [x64, arm64]  # Added ARM64 for Windows

        runs-on: ${{ matrix.os }}
        needs: check-tag

        steps:
            - name: Checkout code
              uses: actions/checkout@main

            - name: Get version from package.json
              id: get_version
              run: |
                  echo "PACKAGE_VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV

            - name: Set up Node.js
              uses: actions/setup-node@main
              with:
                  node-version: "21"

            - name: Cache Node.js dependencies
              uses: actions/cache@main
              with:
                  path: ~/.npm
                  key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.OS }}-node-

            - name: Set up Python (macOS only)
              if: matrix.os == 'macos-latest'
              uses: actions/setup-python@main
              with:
                  python-version: "3.12"

            - name: Cache Python dependencies (macOS only)
              if: matrix.os == 'macos-latest'
              uses: actions/cache@main
              with:
                  path: ~/.cache/pip
                  key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
                  restore-keys: |
                      ${{ runner.os }}-pip-

            - name: Cache Electron build (all platforms)
              uses: actions/cache@main
              with:
                  path: |
                      ${{ github.workspace }}/.electron
                      ${{ github.workspace }}/.cache/electron
                      ${{ github.workspace }}/.cache/electron-builder
                  key: ${{ runner.os }}-electron-cache-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-electron-cache-

            - name: Install Python virtual environment (macOS only)
              if: matrix.os == 'macos-latest'
              run: |
                  python3 -m venv venv
                  source venv/bin/activate
                  pip install --upgrade pip setuptools

            - name: Ensure package-lock.json is up to date
              run: npm install
              env:
                  CI: true

            - name: Install dependencies (Ubuntu and macOS)
              if: matrix.os != 'windows-latest'
              run: |
                  if [ "${{ matrix.os }}" = "macos-latest" ]; then
                    source venv/bin/activate
                    npm install appdmg --save-dev
                  fi
                  npm ci

            - name: Install dependencies (Windows)
              if: matrix.os == 'windows-latest'
              run: npm ci

            - name: Build Electron app (macOS)
              if: matrix.os == 'macos-latest'
              run: |
                  source venv/bin/activate
                  for arch in ${{ join(matrix.arch, ' ') }}; do
                    npm run make -- --arch=$arch
                    mkdir -p out/make-$arch
                    mv out/make/* out/make-$arch/
                  done

            - name: Build Electron app (Windows)
              if: matrix.os == 'windows-latest'
              run: |
                  $architectures = @("x64", "arm64")
                  foreach ($arch in $architectures) {
                      npm run make -- --arch=$arch
                      New-Item -ItemType Directory -Force -Path "out/make-$arch"
                      Move-Item -Path "out/make/*" -Destination "out/make-$arch/"
                  }
              env:
                  CSC_IDENTITY_AUTO_DISCOVERY: false

            - name: Build Electron app (Linux)
              if: matrix.os == 'ubuntu-latest'
              run: npm run make
              env:
                  CSC_IDENTITY_AUTO_DISCOVERY: false

            - name: Upload Artifacts
              uses: actions/upload-artifact@main
              with:
                  name: iSpeakerReact-${{ matrix.os }}
                  path: |
                      out/make*
                      out/make-*

    release:
        runs-on: ubuntu-latest
        needs: build

        steps:
            - name: Checkout code
              uses: actions/checkout@main
              with:
                  fetch-depth: 0

            - name: Download all build artifacts
              uses: actions/download-artifact@main
              with:
                  path: ./release

            - name: Get version from package.json
              id: get_version
              run: |
                  echo "PACKAGE_VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV

            - name: Get latest tag
              id: get_tag
              run: |
                  latest_tag=$(git describe --tags --abbrev=0 || echo "")
                  if [ -z "$latest_tag" ]; then
                      new_tag="v${{ env.PACKAGE_VERSION }}"
                  else
                      if [ "$latest_tag" == "v${{ env.PACKAGE_VERSION }}" ]; then
                          random_str=$(openssl rand -hex 4)
                          new_tag="v${{ env.PACKAGE_VERSION }}-$random_str"
                      else
                          new_tag="v${{ env.PACKAGE_VERSION }}"
                      fi
                  fi
                  echo "latest_tag=$new_tag" >> $GITHUB_ENV

            - name: Create tag
              run: |
                  git tag ${{ env.latest_tag }}
                  git push origin ${{ env.latest_tag }}

            - name: Create GitHub release
              id: create_release
              uses: softprops/action-gh-release@v2
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ env.latest_tag }}
                  name: v${{ env.PACKAGE_VERSION }}
                  body: |
                      Release version ${{ env.PACKAGE_VERSION }} of the project.
                  prerelease: ${{ github.event_name == 'pull_request' }}

            - name: Display the release directory structure
              run: ls -R ./release

            - name: Upload Release Assets
              run: |
                  for artifact in "./release/iSpeakerReact-*"; do
                    for file in $(find "$artifact" -type f); do
                      if [[ "$file" == *"RELEASES"* ]]; then
                        echo "Skipping $file"
                        continue
                      fi
                      echo "Attempting to upload: $file"
                      if gh release upload ${{ env.latest_tag }} "$file" --clobber; then
                        echo "Successfully uploaded: $file"
                      else
                        echo "Failed to upload: $file"
                      fi
                    done
                  done
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
